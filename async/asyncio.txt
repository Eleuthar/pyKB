# dedicated async libz: aiofiles, umongo, asyncpg (postgres), asyncio-redis


OVERVIEW
``````````
* use async libs for full async effect
* prime via 'next()', allow execution to advance to 'yield' expression
* send values to coroutine via 'send()'
* consume values sent to them via '(yield)'
* can suspend and resume execution
* close it via 'close()'
* create_task
    \\ return task - a handle over the coroutine execution; can cancel
* gather
    \\ wait for all tasks to complete
    \\ return the results of the spawned coroutines
    \\ cancel all tasks in one "cancel()" command
    \\ Stops execution if one coroutine raises an error ?



Define coroutine
``````````````````
# until Py 3.5
@asyncio.coroutine
def ex_coro():
	yield from fun()

# since Py 3.5
async def ex_coroutine():
	await fun()



Turn generator into coroutine
``````````````````````````````
def grep(pattern):
	print('Looking for ', pattern)
	while True:
		line = (yield)
		if pattern in line:
			print(line)

grepper = grep('patterns')
next(grepper)
	\\ Output: "Looking for patterns"
grepper.send('ZZZZZ')
grepper.send("XXXXX")
grepper.close()



Runner
`````````
loop = asyncio.get_event_loop()
task_obj = loop.create_task(some_coroutine(*arg, **kwarg))
loop.run_until_complete(task_obj)
	# can `task_obj.cancel()` -> CancelledError 
loop.close()



Scheduling calls
````````````````
* import functools to force asyncio to receive kwarg for stopping the loop

loop.call_soon(functools.partial(function_name, *arg, **kwarg))
loop.call_soon_threadsafe(function_name, *arg)
loop.call_later(<int>, function_name, *arg)

# grab loop's time instead of computer time
current_time = loop.time()
loop.call_at(current_time + 300, function_name, loop)




