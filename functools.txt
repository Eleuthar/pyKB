~~~~~~~~~~~~~~~~~ partial ~~~~~~~~~~~~~~~~~

\\ Function factory with partially provided argument


def get_p(arg1, arg2, arg3):
	print(arg1, arg2, arg3)
 

>>> q = partial(get_p, 'arg1')
>>> q
functools.partial(<function get_p at 0x7f5d7dc231a0>, 'arg1')


>>> q = partial(get_p, 'arg1', 'arg2')
>>> q
functools.partial(<function get_p at 0x7f5d7dc231a0>, 'arg1', 'arg2')


>>> q('arg3>')
arg1 arg2 arg3>



~~~~~~~~~~~~~~~~~ reduce ~~~~~~~~~~~~~~~~~

\\ run function through iterable

def multiply(num1, num2):
	print(f"multiplying num1={num1} by num2={num2}")
	return num1 * num2


>>> reduce(multiply, range(5,10))
multiplying num1=5 by num2=6
multiplying num1=30 by num2=7
multiplying num1=210 by num2=8
multiplying num1=1680 by num2=9
