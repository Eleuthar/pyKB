* Store values when their context of creation does not exist anymore

* Closures are an alternative to small classes, for hiding & encapsulating data.

* A true closure must have an outer scope function var to be referenced by the inner.

* "nonlocal" is used to store \ modify an outer scope immutable variable, excluding globals

* <new_function>.__closure__[0].cell_contents == closure variable value



# EXAMPLE 1
``````````````
def make_counter():
    i = 0
    def counter(): # counter() is a closure
        nonlocal i
        i += 1
        return i
    return counter

>>> c1 = make_counter()
>>> c2 = make_counter()
>>> print (c1(), c1(), c2(), c2())
1 2 1 2


# EXAMPLE 2
``````````````
def generateCallback(x, y):
    x = x
    y = y
    def callback(ch, method, properties, body):
        print(f'Executing callback with {x} {y}')
        print(f'Executing inner callback with {ch}, {method}, {properties} & {body}')
    return callback


>>> qb = generateCallback('xxx', 'qqq')
>>> qb.__closure__[0].cell_contents == 'xxx'
>>> qb.__closure__[1].cell_contents == 'qqq'
>>> qb('ch', 'method', 'properties', 'body')
Executing callback with xxx qqq
Executing inner callback with ch, method, properties & body


Example 3
````````````
def outer(par):
    loc = par

    def inner():
        return loc
    return inner

>>> var = 1
>>> fun = outer(var)
>>> print(fun())
1

\\ an inner function returns the outer function's variable
\\ the outer function returns the inner function (not the local variable's value). 
\\ if the outer function simply returns the local variable, "fun" would no longer point to a function, but an integer which is not callable.


Example 4
`````````````
def make_closure(par):
    loc = par

    def power(p):
        return p ** loc
    return power


>>> fsqr = make_closure(2)
>>> fcub = make_closure(3)

>>> for i in range(5):
>>>     print(i, fsqr(i), fcub(i))
	
\\ outer function param is used as local var for inner
\\ inner function returns the function to outer
\\ fsqr & fscub become the returned inner function -> power(p) == fsqr(p), where value of "p" is given by "i"
