~~~~~~~~~~~~~~~~~~~~~
#   WITHOUT ARG     #   
~~~~~~~~~~~~~~~~~~~~~


from functools import wraps, update_wrapper


def mapper(fnc):

    @wraps(fnc)
    def inner(list_of_valuez):
        return [fnc(value) for value in list_of_values]

    return inner



@mapper
def camelcase(z):
    return ''.join([word.capitalize() for word in z.split('-')])

names = [ 'rick_ross', 'A$Ap_rocky', 'znoop_dg' ]



\\ @wraps(fnc) OR update_wrapper(fnc, inner) copies metadata of the decorated function to the decorator and returns the decorator with the new properties
\\ without @wraps, ``print(camelcase.__doc__)`` would print mapper doc
	



~~~~~~~~~~~~~~~~~
#   WITH  ARG   #
~~~~~~~~~~~~~~~~~


import random


def power_of(arg):
	"""return a new function with the result of the decorated"""

    def decorator(fnc):
        def inner():
            return fnc() ** exponent
		return inner

   # default arg value if is function
   # better approach than signature kwarg of "arg=2"
   if callable(arg):
	    exponent = 2
	    return decorator(arg)
	else:
	    exponent = arg
	    return decorator



@power_of(.5)
def random_odd_digit():
    return random.choice([1, 3, 5, 7, 9])


print(random_odd_digit())
    \\ without argument, use the default arg of 2

