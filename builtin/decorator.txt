Function that wraps another function to modify its behavior

* @wraps(fnc) OR update_wrapper(fnc, inner) copies metadata of the decorated function to the decorator and returns the decorator with the new properties

* without @wraps, ``add()`` would print mapper ``log_decorator``

* the inner function args\kwargs are taken from the decorated function on invoking


Example 1
`````````````````````````

import functools
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)


def log_decorator(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        print(f"Calling {func.__name__} with args: {args}, kwargs: {kwargs}")
        result = func(*args, **kwargs)
        print(f"{func.__name__} returned: {result}")
        return result
    return wrapper


@log_decorator
def add(a, b):
    return a + b

add(3, 5)



Example 2 \\ decorator factory
``````````````````````````````````

def my_decorator():
    def actual_decorator(func):
        def wrapper(*args, **kwargs):
            print("Before function call")
            result = func(*args, **kwargs)
            print("After function call")
            return result
        return wrapper
    return actual_decorator

@my_decorator()  # Must call it to get the actual decorator
def greet(mzg):
    print(mzg)

greet('BREEEEEH, bruh !!')