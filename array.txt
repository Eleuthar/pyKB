!!! declare only positive range


len(lizt)
	\\ length


del lizt[#]
	\\ remove index

	
lizt[-1]
	\\ last index, -2 == penultim, etc
	

lizt.append(value)


lizt.insert([index], value)
	\\ add value to index & shift existing index to left


lzt[0], lzt[4] = lzt[4], lzt[0]
	\\ index value swapping without buffer
	
	
lzt.sort()
	\\ default ascending order
	

lzt.reverse()
	\\ reverse the original order, no sorting

element not in | in lzt
	\\ return True or False if an element is in list
	
	

SLICE
~~~~~~

lzt2 = lzt1[start:end]
	\\ slice a new copy within range, not including end index; [:] = duplicate entire list content
	
lzt[:end]
	\\ from beginning to end index
	
lzt[start:]
	\\ from start index to last index

	!!! del lzt<slice> does not create copy, but delete the index; will never delete the list, only empty it
	


LIST COMPREHENSION
~~~~~~~~~~~~~~~~~~~

!!! create list from existing one


lzt = [<value> for i in range(Q)]
	\\ create list during execution with <expression>

	
lzt = [[[X-axis loop] Y-axis loop] Z-axis loop]
	\\ 3D list comprehension; index value access reversed: lzt[z][y][x]
	\\ xample: x = hotel room, y = hotel floor, z = building
	
	
copyOfLzt = copy.deepcopy(Lzt)
	OR
copyOfLzt = [row[:] for row in Lzt]
	\\ create independent copy of 2D array
	
	
for x in range(10):
    the_list.append(1 if x % 2 == 0 else 0)

	
	
FUNCTION ARG
~~~~~~~~~~~~
!!! if the argument is a list, then changing the value of the corresponding parameter doesn't affect the list

!!! but if you change a list identified by the parameter (note: the list, not the parameter!), the list will reflect the change.


TUPLE
~~~~~
 !!! immutable array:

tuple = ()
	\\ empty tuple


tuple = 1,
tuple = (1,)
	\\ define single element tuple


tuple = (1, .5, .25)
tuple = 1, .5, .25
	\\ define multiple element tuple


var1, var2, var3 = tuple
	\\ unpack tuple elements into var1-3