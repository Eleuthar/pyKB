flow
```````````````
startproject
startapp
project\\settings.INSTALLED_APPS
<APP>\\apps.<APP>Config
<APP>\\apps.models
	def __str__()
register model in admin - optional
makemigrations
migrate
createsuperuser
define serializer & bond to model
define view function & 
import view in urls & append urlpatterns
<APP>\\templates\\<APP>\\<htmlPages>
POST \ PUT \ GET via Django DB API: .get, .save()
request.POST['keyName'] && HttpResponseRedirect(reverse("<app>:<url name>", args=(var,) ))
    \\ prevent data duplication on browser Back button




~~~~~~~~~~~~~~~~~~~~~~~~~~~~ PROJECT ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

urls
	from django.contrib import admin
	from django.urls import include, path
	from django.contrib.auth import views as auth_views
	from django.conf import settings
	from django.conf.urls.static import static
	from users import views as user_views
		
	if settings.DEBUG:
    	urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
		
		
urls.urlpatterns
	path('admin/', admin.site.urls),
    path('profile/', user_views.profile, name='profile'),    
    path('', include('blog.urls')),
    path('login/', auth_views.LoginView.as_view(template_name='users/login.html'), name='login'),


settings.INSTALLED_APPS
	appX.apps.AppXConfig
	GRANT ALL PRIVILEGES ON *.* TO 'uzr'@'localhost'
	\\ globals
	LOGIN_REDIRECT, LOGIN_URL, EMAIL_*



~~~~~~~~~~~~~~~~~~~~~~~~~~~~ APP.MODELS.PY ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

from django.db import models
from django.contrib.auth.models import User



class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    image = models.ImageField(default='default.jpg', upload_to='profile_pics')
    def __str__(self):
        return f'{self.user.username} Profile'


class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField('<optional overriding col name>')
    def get_absolute_url(self):
        return reverse('post-detail', kwargs={'<urlParam>': self.urlParam})
    

class Option(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    option_text	= models.CharField(max_length=200)
    votes = models.IntegerField(default=0)



~~~~~~~~~~~~~~~~~~~~~~~ APP.SERIALIZERS.PY ~~~~~~~~~~~~~~~~~~~~~~~~~~

from rest_framework import serializers
from <APP>.models import <ClassModel>


class ObjSerializer(serializers.ModelSerializer):
    <related_propz> = <RelatedSerializer>(many=True)

    class Meta:
        model = <Obj>
        fields = [...]
        # never '__all__' 



~~~~~~~~~~~~~~~~~~~~~~~~~~ APP.URLS.PY ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

from django.urls import path
from . import views


urls.urlpatterns = [
	path('route', 'view_function', 'view_function_dict_kwargs', 'name'),	
	path('<int:pk>/results/, views.results, name='results'),	
	path('<int:pk>/results, views.ResultsView.as_view(), name='results')
]


~~~~~~~~~~~~~~~~~~~~~~~~~~ APP.ADMIN.PY ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

from django.contrib import admin
from .models import ClassName

admin.site.register(ClassName)
	


~~~~~~~~~~~~~~~~~~~~~~~~~~ APP.VIEWS.PY ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

from rest_framework.response import Response

# FUNCTION
from rest_framework.decorators import api_view

# CLASS
from django.views import generic

# DRF
from rest_framework import viewsets, status, mixins
from rest_framework.views import APIView
from rest_framework.generics import \
	GenericAPIView \
	CreateAPIView \
	UpdateAPIView \
	RetrieveAPIView \
	ListAPIView \
	ListCreateAPIView
	DestroyAPIView \
	RetrieveUpdateDestroyAPIView \
	RetrieveDestroyAPIView \

"""
MRO:
	APIView < GenericAPIView < CRUD ModelMixin < CRUD APIView
	APIView < GenericAPIView < CRUD ModelMixin < ModelViewSet
	APIView < GenericAPIView < ViewSetMixin < GenericViewSet
	APIView < ViewSetMixin < ViewSet
"""	


from django.template import loader
from django.shortcuts import get_object_or_404, render
from django.http import HttpResponse, HttpResponseRedirect, Http404
from django.urls import reverse
from django.contrib.auth.decorators import login_required

from <APP>.serializers import <MODEL>Serializer
from <APP>.models import <MODEL>



\\ Http404
except ModelClassName.DoesNotExist:
	raise Http404('Item does not exist')

\\ loader
template = loader.get_template('appX/index.html')
return HttpResponse(template.render(content, request))

\\ get_object_or_404
question = get_object_or_404(Question, pk=request.POST['choice'])
return HttpResponseRedirect(reverse('appX:view_function_name'))
    # OR
question = get_object_or_404(Question, pk=question_id)
context = {'question': question}
return render(request, 'appX/detail.html', context)



# DRF APIView
`````````````````````````````````
class <Name>(APIView):

	# GET all
	def.get(self, request):
		LIST = MODEL>.objects.all()
		serializer = <MODEL>Serializer(LIST, many=True)
		return Response(serializer.data)

	# GET 1
	def get_object(self, pk):
		obj = get_object_or_404(MODEL, pk=pk)
		serializer = <MODEL>Serializer(obj)
		return Response(serializer.data)

	def.post(self, request, *args, **kwargs):		
		obj = self.get_object(pk)
		serializer = <MODEL>Serializer(obj)
		return Response(serializer.data)				
		# OR	
		if request.data.get('<prop>') != '':
			serializer = <MODEL>Serializer(data=request.data)
			if serializer.is_valid():
				serializer.save()
				return Response(serializer.data)

	def put(self, request, pk):
		obj = self.get_object(pk)
		serializer = <MODEL>Serializer(obj, data=request.data)
		if serializer.is_valid():
			serializer.save()
			return Response(serializer.data)
		return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

	def delete(self, request, pk):
		obj = self.get_object(pk)
		obj.delete()
		return Response(status=status.NO_CONTENT)



# DRF ViewSets
```````````````````
"""
Exposes .list() for many items, .retrieve() for single item & .create()
Register viewset with router class
Bind view name to functions
"""


views.py:

	def list(self, request):
		queryset = <MODEL>.objects.all()
		serializer = <MODEL>Serializer(queryset, many=True)
		return Response(serializer.data)
	
	def retrieve(self, request, pk=None):
		queryset = <MODEL>.objects.all()
		if pk is not None:
			obj = get_object_or_404(queryset, pk=pk)
			serializer = <MODEL>Serializer(obj)
			return Response(serializer.data)


urls.py:
	
	<app view name> = <APP>ViewSets.as_view({
		'get': 'list'
	})

	<app view name> = <APP>ViewSets.as_view({
		'get': 'retrieve'
	})




# DJANGO Generic
```````````````````````````````````
class <Name>(generic.ListView):
        template_name = "<url path>"
        context_object_name = "<template key>"

        def get_queryset(self):
        	return Question.objects.order_by("-pub_date")[:5]
        
        
    class DetailView(generic.DetailView):
		model = Question
		template_name = "polls/detail.html"
		context_object_name = '<template object>'
		ordering = [-<key>]	

		\\ override template_name expected to be:
			 <app name>/<model name>_list.html
 			 <app name>/<model name>_detail.html
 			 
	 class PostCreateView(generic.CreateView):
	 	model = Post
	 	fields = ['title', 'content']
	 	
	 	\\ override
	 	def form_valid(self, form):
	 		form.instance.author = self.request.user
			return super().form_valid(form)






