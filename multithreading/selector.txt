
#~~~~~~~~~~#
#  SERVER  #
#~~~~~~~~~~#

import selectors
import socket


z = selectors.DefaultSelector()

q = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

q.bind((host, port))

q.listen()

print('listening on ', (host,port))

q.setblocking(False)

z.register(q, selectors.EVENT_READ, data=none)
	\\ register socket to be monitored for events

while True:
	eventz = z.select(timeout=None)
	for key, mzk in eventz:
		if key.data is None:
			accept_wrapper(key.fileobj)
		else:
			service_connection(key, mzk)



def accept_wrapper(zq):
	conn, addr = zq.accept()
	print('Accepted connection from ', addr, '\n')
	conn.setblocking(False)
	data = types.SimpleNamespace(addr=addr, inb=b'', outb=b'')
	eventz = selectors.EVENT_READ | selectors.EVENT_WRITE
	z.register(conn, eventz, data=data)


def service_connection(key, mzk):
	zok = key.fileobj
	data = key.data
	if mzk & selectors.EVENT_READ:
		recv_data = zok.recv(1024)
		if recv_data:
			data.outb += recv_data
		else:
			print('Closing connection to', data.addr)
			sel.unregister(zok)
			zok.close()
	if mzk & selectors.EVENT_WRITE:
		if data.outb:
			print('echoing ', repr(data.outb), 'to ', data.addr)
			sent = zok.send(data.outb)
			data.outb = data.outb[sent:]





#~~~~~~~~~~#
#  CLIENT  #
#~~~~~~~~~~#


mzg = [b'mzg #1 from client', b'mzg #2 from client']

def start_conn(host, port, num_connz):
	\\ num_connz is read from CLI, input number of connectionz to create to the server

	zAddr = (host, port)
	for q in range(0, num_connz):
		connid = q + 1
		print('starting connection ', connid, ' to ', zAddr)
		zok = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		zok.setblocking(False)
		zok.connect_ex(zAddr)
			\\ connect would immediately raise BlockingIOError exception
			\\ connect_ex returns error indicator errno.EINPROGRESS during pending connection

		eventz = selectors.EVENT_READ | selectors.EVENT_WRITE
		data = types.SimpleNamespace(connid=connid,
			mzg_total = sum(len(m) for m in in messages),
			rev_total = 0,
			mzgz = list(messages),
			outb=b'')
			\\ create the data to be stored with the socket

		z.register(zok, eventz, data=data)



def service_connection(key, mask):
    sock = key.fileobj
    data = key.data
    if mask & selectors.EVENT_READ:
        recv_data = sock.recv(1024)  # Should be ready to read
        if recv_data:
            print('received', repr(recv_data), 'from connection', data.connid)
            data.recv_total += len(recv_data)
        if not recv_data or data.recv_total == data.msg_total:
            print('closing connection', data.connid)
            sel.unregister(sock)
            sock.close()
    if mask & selectors.EVENT_WRITE:
        if not data.outb and data.messages:
            data.outb = data.messages.pop(0)
        if data.outb:
            print('sending', repr(data.outb), 'to connection', data.connid)
            sent = sock.send(data.outb)  # Should be ready to write
            data.outb = data.outb[sent:]





