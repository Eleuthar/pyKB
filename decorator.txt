~~~~~~~~~~~~~~~~~~~~~
#   WITHOUT ARG     #   
~~~~~~~~~~~~~~~~~~~~~


from functools import wraps


def mapper(fnc):

    @wraps(fnc)
    def inner(list_of_valuez):
    
        '''This is the inner()'''

        return [fnc(value) for value in list_of_values]

    return inner



@mapper
def camelcase(z):
    
    ''' Turn ztringz_like_thiz into ZtringzLikeDiz ''' 

    return ''.join([word.capitalize() for word in z.split('-')])

names = [ 'rick_ross', 'A$Ap_rocky', 'znoop_dg' ]



print(camelcase.__doc__)
    \\ without @wraps, it would print mapper doc





~~~~~~~~~~~~~~~~~
#   WITH  ARG   #
~~~~~~~~~~~~~~~~~


import random


def power_of(arg):

    def decorator(fnc):       
        def inner():
            return fnc() ** exponent
        return inner

   if callable(arg):
	    exponent = 2
	    return decorator(arg)
	else:
	    exponent = arg
	    return decorator



@power_of(.5)
def random_odd_digit():

    return random.choice([1, 3, 5, 7, 9])


print(random_odd_digit())
    \\ @power_of argument requires an extra layer of abstraction that will return the decorator function with argument for exponent
    \\ without argument, the meta decorator returns inner

